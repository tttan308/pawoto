import React, { useState, useEffect } from "react";
import { Container, Typography, Box, Button, Paper, TextField, Dialog, DialogActions, DialogContent, DialogTitle } from "@mui/material";
import { styled } from "@mui/system";
import { Howl } from "howler";
import Layout from "layout/Layout";

const OptionBox = styled(Paper)({
  padding: "16px",
  marginBottom: "16px",
  cursor: "pointer",
  "&:hover": {
    backgroundColor: "#FFF3E0",
  },
  borderRadius: "8px",
});

const ImageBox = styled(Box)({
  display: "flex",
  justifyContent: "center",
  alignItems: "center",
  marginBottom: "2rem",
  maxWidth: "100%",
});

const motivationalMessages = {
  happy: "Ch√∫c b·∫°n m·ªôt ng√†y tr√†n ƒë·∫ßy ni·ªÅm vui v√† nƒÉng l∆∞·ª£ng t√≠ch c·ª±c! H√£y lan t·ªèa ni·ªÅm vui n√†y nh√©!",
  sad: "Pawoto ·ªü ƒë√¢y ƒë·ªÉ c√πng b·∫°n v∆∞·ª£t qua m·ªçi c·∫£m x√∫c. ƒê·ª´ng lo, b·∫°n lu√¥n c√≥ ng∆∞·ªùi ƒë·ªìng h√†nh!",
  calm: "Gi·ªØ m√£i s·ª± b√¨nh y√™n v√† th∆∞ th√°i n√†y nh√©! Th·∫≠t tuy·ªát khi b·∫°n c·∫£m th·∫•y tho·∫£i m√°i nh∆∞ v·∫≠y!",
};

let soundInstance;

const EmotionStation = () => {
  const [mood, setMood] = useState(null);
  const [showGift, setShowGift] = useState(false);
  const [motivationalMessage, setMotivationalMessage] = useState("");
  const [isAuthorized, setIsAuthorized] = useState(false); // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ nh·∫≠p m√£ ƒë√∫ng kh√¥ng
  const [inputCode, setInputCode] = useState("");
  const [openDialog, setOpenDialog] = useState(true); // Hi·ªÉn th·ªã popup m√£
  const [errorMessage, setErrorMessage] = useState(""); // Th√¥ng b√°o l·ªói n·∫øu m√£ kh√¥ng ƒë√∫ng

  const handleMoodSelect = (selectedMood) => {
    setMood(selectedMood);
    setMotivationalMessage(motivationalMessages[selectedMood]);
  };

  const playMusic = (moodType) => {
    let soundOptions;
    if (moodType === "happy") {
      soundOptions = ["happy-song.mp3", "happy-song.wav"];
    } else if (moodType === "sad") {
      soundOptions = ["sad-song.mp3", "sad-song1.mp3"];
    } else if (moodType === "calm") {
      soundOptions = ["calm-song1.mp3", "calm-song2.mp3"];
    }

    const randomSound = soundOptions[Math.floor(Math.random() * soundOptions.length)];
    soundInstance = new Howl({
      src: [randomSound],
      volume: 0.5,
    });
    soundInstance.play();
  };

  const handleGiftClick = () => {
    setShowGift(true);
    playMusic(mood); // Ph√°t nh·∫°c khi ng∆∞·ªùi d√πng nh·∫≠n qu√†
  };

  // D·ª´ng audio khi component b·ªã unmounted
  useEffect(() => {
    return () => {
      if (soundInstance) {
        soundInstance.stop();
      }
    };
  }, []);

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫≠p m√£ v√†o popup
  const handleCodeSubmit = () => {
    if (inputCode === "pawoto23") {
      setIsAuthorized(true);
      setOpenDialog(false); // ƒê√≥ng popup
      setErrorMessage(""); // X√≥a th√¥ng b√°o l·ªói n·∫øu m√£ ƒë√∫ng
    } else {
      setErrorMessage("M√£ kh√¥ng ƒë√∫ng, vui l√≤ng th·ª≠ l·∫°i."); // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
    }
  };

  const handleCancel = () => {
    setOpenDialog(false);
    setIsAuthorized(false); // ƒê·∫∑t l·∫°i tr·∫°ng th√°i khi ng∆∞·ªùi d√πng h·ªßy
  };

  return (
    <Layout>
      <Container maxWidth="md">
        {/* Popup y√™u c·∫ßu m√£ */}
        <Dialog open={openDialog} disableEscapeKeyDown>
          <DialogTitle>Nh·∫≠p m√£ truy c·∫≠p</DialogTitle> {/* M√†u cam cho ti√™u ƒë·ªÅ */}
          <DialogContent>
  <TextField
    autoFocus
    margin="dense"
    label="M√£ truy c·∫≠p"
    type="password"
    fullWidth
    variant="outlined"
    value={inputCode}
    onChange={(e) => setInputCode(e.target.value)}
    error={!!errorMessage} // Hi·ªÉn th·ªã vi·ªÅn ƒë·ªè khi c√≥ l·ªói
    helperText={errorMessage} // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói b√™n d∆∞·ªõi
    sx={{
      "& .MuiOutlinedInput-root": {
        "& fieldset": {
          borderColor: "#FFB74D", // M√†u cam cho vi·ªÅn TextField
        },
        "&:hover fieldset": {
          borderColor: "#FFA726", // M√†u cam ƒë·∫≠m khi hover
        },
        "&.Mui-focused fieldset": {
          borderColor: "#FB8C00", // M√†u cam ƒë·∫≠m khi focus
        },
      },
      "& .MuiInputLabel-root": {
        color: "#FFB74D", // M√†u cam cho label khi b√¨nh th∆∞·ªùng
      },
      "& .MuiInputLabel-root.Mui-focused": {
        color: "#FB8C00", // M√†u cam ƒë·∫≠m cho label khi focus
      },
      "& .MuiFormHelperText-root": {
        color: "#FFB74D", // M√†u cam cho helper text (th√¥ng b√°o l·ªói)
      },
    }}
  />
        </DialogContent>

          <DialogActions>
            <Button
              onClick={handleCancel}
              variant="outlined"
              sx={{
                color: "#FB8C00",
                borderColor: "#FFB74D",
                "&:hover": { backgroundColor: "#FFF3E0", borderColor: "#FFA726" },
              }}
            >
              H·ªßy
            </Button>
            <Button
              onClick={handleCodeSubmit}
              variant="contained"
              sx={{
                backgroundColor: "#FFB74D", // M√†u cam cho n√∫t X√°c nh·∫≠n
                "&:hover": {
                  backgroundColor: "#FFA726", // M√†u cam ƒë·∫≠m h∆°n khi hover
                },
              }}
            >
              X√°c nh·∫≠n
            </Button>
          </DialogActions>
        </Dialog>

        {/* N·ªôi dung EmotionStation n·∫øu ng∆∞·ªùi d√πng nh·∫≠p ƒë√∫ng m√£ */}
        {isAuthorized && (
          <>
            {!mood && (
              <Box mt={4} textAlign="center">
                <Typography variant="h4" gutterBottom sx={{ color: "#FB8C00", fontWeight: "bold" }}>
                  Pawoto xin ch√†o b·∫°n y√™u!!!
                </Typography>
                <ImageBox>
                  <img
                    src="greeting.gif"
                    alt="Greeting Meme"
                    style={{ width: "50%", maxWidth: "250px", borderRadius: "8px" }}
                  />
                </ImageBox>
              </Box>
            )}

            {/* Mood Selection */}
            {!mood && (
              <Box>
                <Typography variant="h5" gutterBottom sx={{ color: "#FB8C00", fontWeight: "bold" }}>
                  N·∫øu h√¥m nay b·∫°n l√† m·ªôt chi·∫øc t√∫i Pawoto, b·∫°n s·∫Ω l√† t√∫i n√†o?
                </Typography>
                <OptionBox
                  onClick={() => handleMoodSelect("happy")}
                  sx={{
                    display: "flex",
                    alignItems: "center",
                    backgroundColor: "#F8BBD0", // H·ªìng pastel cho happy
                    "&:hover": {
                      backgroundColor: "#F48FB1",
                      transform: "scale(1.05)",
                    },
                    transition: "transform 0.2s ease",
                  }}
                >
                  <Typography variant="body1" sx={{ display: "flex", alignItems: "center" }}>
                    <span role="img" aria-label="happy" style={{ fontSize: "1.5rem", marginRight: "8px" }}>
                      üòä
                    </span>
                    A. Vui nh∆∞ nh·∫∑t ƒë∆∞·ª£c t√∫i Pawoto ƒë·ªôc nh·∫•t ‚Äì H√¥m nay m√¨nh c·ª±c k·ª≥ vui, ki·ªÉu nh∆∞ v·ª´a t√¨m ƒë∆∞·ª£c m·ªôt chi·∫øc t√∫i hi·∫øm m√† kh√¥ng ai c√≥!
                  </Typography>
                </OptionBox>

                <OptionBox
                  onClick={() => handleMoodSelect("sad")}
                  sx={{
                    display: "flex",
                    alignItems: "center",
                    backgroundColor: "#FFE0B2", // M√†u cam pastel cho sad
                    "&:hover": {
                      backgroundColor: "#FFD54F",
                      transform: "scale(1.05)",
                    },
                    transition: "transform 0.2s ease",
                  }}
                >
                  <Typography variant="body1" sx={{ display: "flex", alignItems: "center" }}>
                    <span role="img" aria-label="sad" style={{ fontSize: "1.5rem", marginRight: "8px" }}>
                      üò¢
                    </span>
                    B. Bu·ªìn nh∆∞ t√∫i Pawoto ch∆∞a t√¨m ƒë∆∞·ª£c ch·ªß ‚Äì T√¢m tr·∫°ng c√≥ ch√∫t bu·ªìn, gi·ªëng nh∆∞ m·ªôt chi·∫øc t√∫i v·∫´n ƒëang n·∫±m y√™n ch·ªù ƒë·ª£i ng∆∞·ªùi ƒë·∫øn mang v·ªÅ.
                  </Typography>
                </OptionBox>

                <OptionBox
                  onClick={() => handleMoodSelect("calm")}
                  sx={{
                    display: "flex",
                    alignItems: "center",
                    backgroundColor: "#B3E5FC", // M√†u xanh pastel ƒë·∫≠m h∆°n cho calm
                    "&:hover": {
                      backgroundColor: "#81D4FA", // Xanh ƒë·∫≠m khi hover
                      transform: "scale(1.05)",
                    },
                    transition: "transform 0.2s ease",
                  }}
                >
                  <Typography variant="body1" sx={{ display: "flex", alignItems: "center" }}>
                    <span role="img" aria-label="calm" style={{ fontSize: "1.5rem", marginRight: "8px" }}>
                      üòå
                    </span>
                    C. B√¨nh y√™n nh∆∞ t√∫i Pawoto tr√™n vai ‚Äì H√¥m nay m√¨nh th·∫•y th·∫≠t nh·∫π nh√†ng v√† th∆∞ th√°i, nh∆∞ ƒëang ƒëeo m·ªôt chi·∫øc t√∫i tho·∫£i m√°i tr√™n vai, ch·∫≥ng c√≥ g√¨ ph·∫£i lo l·∫Øng.
                  </Typography>
                </OptionBox>
              </Box>
            )}

            {/* Mood Result */}
            {mood && (
              <Box mt={4} textAlign="center">
                <ImageBox>
                  <img
                    src={mood === "happy" ? "happy.gif" : mood === "sad" ? "sad.gif" : "calm.gif"}
                    alt="Mood"
                    style={{ width: "50%", maxWidth: "250px", borderRadius: "8px" }}
                  />
                </ImageBox>

                <Typography variant="body1" gutterBottom sx={{ fontStyle: "italic", color: "#FB8C00" }}>
                  {motivationalMessage}
                </Typography>

                <ImageBox>
                  <img
                    src="end.gif"
                    alt="End"
                    style={{ width: "50%", maxWidth: "250px", borderRadius: "8px" }}
                  />
                </ImageBox>

                {!showGift && (
                  <Button
                    variant="contained"
                    sx={{ backgroundColor: "#FFB74D", "&:hover": { backgroundColor: "#FFA726" } }}
                    onClick={handleGiftClick}
                  >
                    Nh·∫≠n qu√† t·ª´ Pawoto
                  </Button>
                )}
              </Box>
            )}

            {/* Final Gift Message */}
            {showGift && (
              <Box mt={4} textAlign="center">
                <Typography variant="h5" gutterBottom sx={{ color: "#FB8C00", fontWeight: "bold" }}>
                  Ch√†o b·∫°n! Pawoto r·∫•t vui ƒë∆∞·ª£c g·ª≠i ƒë·∫øn b·∫°n m√≥n qu√† nh·ªè n√†y v·ªõi t·∫•t c·∫£ t√¨nh c·∫£m ch√¢n th√†nh.
                </Typography>
                <Typography variant="body1">
                  Mong r·∫±ng b·∫°n s·∫Ω th√≠ch n√≥ v√† lu√¥n ƒë·ªìng h√†nh c√πng Pawoto nh√©! Y√™u th∆∞∆°ng b·∫°n r·∫•t nhi·ªÅu! ‚ù§
                </Typography>
              </Box>
            )}
          </>
        )}
      </Container>
    </Layout>
  );
};

export default EmotionStation;
